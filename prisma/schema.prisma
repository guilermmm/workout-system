// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Exercise {
    id       String              @id @default(cuid())
    name     String
    category String
    workouts ExerciseInWorkout[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Method {
    Standard
    DropSet
    RestPause
    PeakContraction
}

model ExerciseInWorkout {
    id          String   @id @default(cuid())
    exercise    Exercise @relation(fields: [exerciseId], references: [id])
    exerciseId  String
    workout     Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
    workoutId   String
    sets        Json
    description String?
    method      Method

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([workoutId])
}

enum WeekDay {
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
    Sunday
}

model Workout {
    id        String              @id @default(cuid())
    name      String
    profile   Profile             @relation("workouts", fields: [profileId], references: [id])
    profileId String
    exercises ExerciseInWorkout[]
    biSets    Json
    days      WeekDay[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
}

model Profile {
    id               String            @id @default(cuid())
    email            String            @unique
    user             User?             @relation(fields: [userId], references: [id])
    userId           String?           @unique
    isActive         Boolean           @default(true)
    workouts         Workout[]         @relation("workouts")
    finishedWorkouts FinishedWorkout[]
    datasheets       Datasheet[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Datasheet {
    profileId String  @unique
    profile   Profile @relation(fields: [profileId], references: [id])

    weight     Int
    height     Int
    thorax     Int
    waist      Int
    abdomen    Int
    hips       Int
    rightThigh Int
    leftThigh  Int
    rightArm   Int
    leftArm    Int
    rightCalf  Int
    leftCalf   Int

    createdAt DateTime @default(now())

    @@index([profileId])
}

model FinishedWorkout {
    id        String   @id @default(cuid())
    profile   Profile  @relation(fields: [profileId], references: [id])
    profileId String
    workoutId String
    date      DateTime

    @@index([profileId])
}

// NEXT AUTH STUFF BELOW

//

//

//

//

//

//

//

//

//

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    profile       Profile?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
