// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Exercise {
    id        String              @id @default(cuid())
    name      String
    category  String
    hasReps   Boolean
    workouts  ExerciseInWorkout[]
    createdAt DateTime            @default(now())
    updatedAt DateTime            @updatedAt
}

model ExerciseInWorkout {
    id          String   @id @default(cuid())
    exercise    Exercise @relation(fields: [exerciseId], references: [id])
    exerciseId  String
    workout     Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
    workoutId   String
    sets        Int
    reps        Int
    weight      Int?
    time        Int
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Workout {
    id        String              @id @default(cuid())
    name      String
    profile   Profile             @relation("workouts", fields: [profileId], references: [id])
    profileId String
    exercises ExerciseInWorkout[]
    createdAt DateTime            @default(now())
    updatedAt DateTime            @updatedAt
}

model Profile {
    id            String    @id @default(cuid())
    email         String    @unique
    user          User?     @relation(fields: [userId], references: [id])
    userId        String?   @unique
    isActive      Boolean   @default(true)
    workouts      Workout[] @relation("workouts")
    nextWorkoutId String?
}

// NEXT AUTH STUFF BELOW

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    profile       Profile?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
